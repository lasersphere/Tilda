"""
Change list between release with the info on fixes, major changes etc. last changes always on top.
to identify links use: (htt...)
"""

***************************************   Changes for version 1.24 ***************************************

Summary (find details below):

TILDA is now also deployed at CRYRING and this brought a couple of big changes. It is now possible to trigger scans,
steps and bunches separately. Furthermore, TILDA can now work with external scan devices connected through triton instead
of the internal dac only. That means laser-scanning is now possible! A new Job Stacker Ui extends the automation of long
scan routines with different isotopes and track settings. The overall stability has been improved.

Added:
    - Scan Device Selection
        TILDA is now able to use a whole range of scan devices. On the hardware level (FPGA) we now differentiate
        between 'internalDAC' and 'externalTriton'. The 'internalDAC' option, is basically the old operation mode for
        voltage scanning output on the DAC card that's installed in the linedriver crate. The 'externalTriton' mode
        tells the FPGA to not set any voltage steps but send a 'nextStepRequest' software signal back to TILDA and
        wait for the 'scanDevSet' global variable to change back to True before continuing with the scan.
        The 'DAC' and 'Triton' options are then also available as scan device classes in the track pars UI.
        https://app.asana.com/0/0/1156374973115046/f

    - Advanced Triggering
        Originally from a Cryring request, we expanded TILDAs trigger capabilities. Previously there was only one trigger,
        which started the measurements at the lowest level, so basically each bunch (or step when in cs mode). Now there
        is the option to trigger scans, steps and bunches. All of these are configured in the track settings with the old
        trigger named 'meas Trigger'. This one is ultimately still responsible for the timing.
        On the hardware level the new triggers are implemented at the same place as the old one. Scan and step triggers
        can be activated in any order and once both are high, the measurement trigger is armed.
        https://app.asana.com/0/0/1156374973115045/f
        https://app.asana.com/0/10893101573162/921223064715003/f

    - Job Stacker Ui
        A new 'Job Stacker' Ui is available from the TILDA main menu under 'Tools' or using the shortcut Ctrl+J.
        The Ui allows to add multiple scans to a list of jobs that will be executed one after the other. Adding a new
        job is done through the classic 'Scan Control' window where an isotope can be selected, tracks edited and a
        number of repetitions on file set. Closing the Scan Control window adds the job to the list. Each job can be
        repeated a couple of times. The final job list can be stored to a text file and loaded back into the job stacker
        at a later time. Execution is done through the Scan Control windows again automatically. The Job Stacker is
        really just a helper-UI and only loads predefined scan settings into the control before executing an ergo.
        https://app.asana.com/0/10893101573162/1109678433755636/f

    - 20 Bit DAC
        Up to now, only the AD5781 18-Bit DAC was supported by TILDA. For a test with the TREK (x1000) Amplifier we
        changed TILDA to full 20-Bit compatibility. Depending on the DAC card in use, the interface will allow 18- or
        20-bit precision. The calculated number of bits is chosen automatically based on the device name in the DAC
        calibration file. That means old measurements can be loaded, if the original calibration file is provided with
        the measurement.
        https://app.asana.com/0/10893101573162/1136324508377297/f

Improved:

    - Rebinning UI interaction
        New data doesn't overwrite the users input to the spinBox anymore, making it possible to just type the desired
        value instead of wildly scrolling to it. See also under Fixed.
        https://app.asana.com/0/10893101573162/697937483809958/f

    - TrackParsUi wide display
        Since the TrackPars ui did grow a lot over the last time, it often became to big for the screen and thus buttons
        were out of sight. Now there is a Ui_TrackPar_Wide that splits the track settings into two columns instead of one
        so it should fit much better on the screens. The old Ui_TrackPar is still there and only the import line in
        TrackUi.py has to be changed to get it back in case someone really insists on having it.
        https://app.asana.com/0/10893101573162/1157437526547601/f

    - Dummy cs and trs can now pause
        Pausing a dummy didn't work until now and even threw an error because the function definition from SequencerCommon
        wasn't overwritten in the dummies. Now the dummies correctly stop emitting data and resume after the pause.
        Halt in dummy mode however does not finish after the scan but aborts immediately due to how dummy data works.
        https://app.asana.com/0/10893101573162/1156557152553731/f

    - Continous Sequencer Dummy can now simulate a kepco scan
        The dummy now checks whether it's a kepco scan and behaves accordingly together with the DMMdummy.
        In order to get this right, you have to select 'dummy' as your during scan multimeter and make sure measurement
        compl. dest. as well as trigger source are set to 'software'. This is preconfigured in the 'kepco' settings.
        During the kepco scan, the dummy-dmm will emit the number of triggers it received and NOT the set voltage, just
        to make it obvious, that it is not a real measurement. So voltage should equal step number.
        https://app.asana.com/0/10893101573162/1156776314874473/f

    - Couple of minor pollifit changes
        * KingFitter.py: Added more prints of results (S.Kaufmann)
        * InteraciveFit.py: Updated "save pars" (P.Imgram)
        * Added option charge=1 for diffDoppler() (P.Imgram)
        * ThermalPseudoVoigt: removed par sigma, improved description (P. Mueller)
        * Minor adjustments in AliveTools.py - correction of some rel. Doppler (P.Imgram)
        * Added a simulation tab to mainUi.py (P.Imgram)

Fixed:

    - Crash while rebinning
        Changing the rebinning during a scan should no longer be able to crash TILDA. New data doesn't mess with the
        spinBox lock anymore while the user changes the rebinning. Also, a one second time lock now prevents the user
        from rebinning too often. Compare to 'Improved' as well.
        https://app.asana.com/0/10893101573162/697937483809958/f

    - Lock of scan settings
        While scanning you can no longer mess with the settings of the active isotope. You can still view track settings,
        but not confirm changes, add or remove a track of the currently scanning isotope.
        https://app.asana.com/0/10893101573162/697937483809958/f

    - Fix limit for wait after reset
        Changed the doubleSpinBox_waitAfterReset_muS maximum from prev 4200000.0 to 2**32 and removed decimals, one step
        is 1 because the counter in labview is in us 32bit units...
        https://app.asana.com/0/10893101573162/984499362106560/f

    - Fixed: Scan not working after Isotope change
        https://app.asana.com/0/10893101573162/875813760907611/f



***************************************   Changes for version 1.23 ***************************************

Summary (find details below):

This is the start of the Changelog for Tilda, major changes will be summarized
at the beginning of each release log, followed by a short but detailed description
of added features, improvements and bug fixes. Links to the relevant Asana tasks are helpful.


A script for the selective analysis of only some bunches per step was implemented.
Also the analysis of the data was considerably improved and does not block the Graphical User Interface
anymore by blocking the global interpreter lock.
Also some relevant bug fixes, from fixing the plot display to some improvements of
an unwanted dependency of the pre-/during- scan measurement.


Added:
    - Change log between releases (https://app.asana.com/0/10893101573162/639157258301625/f)

    - Script for analysis of only some bunches:
        User can select which bunches to analyse, best is to see in Scratch/ReconstructRawData.py
        As requested in (https://app.asana.com/0/10893101573162/113240495951759/f)

    - for Agilent3458A an option to adjust the number of power line cycles (NPLC) was added.

    - export function for the currently shown time resolved view, as a .pgn of the whole window and
      all currently shown plots are saved as .png, .svg and .csv. The user is asked to choose the storage location.
      Currently only supported in time resolved plot.
      Shortcut: Strg + S

Improved:

    - dummy data constructed in TimeResolvedSequencerDummy is now of better quality since there is
      always a 10ns gap in the time axis and the pattern is repeated if it does not fit over all steps.
      Also number of bunches will be relevant.
      It is also possible to have a count in every bin, to stress the memory as much as possible,
      therefore one has to set count_in_every_bin=True in self.data_builder(...)
      (https://app.asana.com/0/10893101573162/699498449314201/f)

    - Analysis of time resolved data was improved:
        as before, incoming raw data is translated to zero free data array
        (scaler_number, line_voltage_step_number, time_stamp, number_of_counts)
        but now instead of appending this to a zero free sum array of all counts, this short array is translated to a
        full non zero free matrix, which is then added to the sum matrix, this goes rather quick and the
        sorting algorithm for sorting raw_data->zero_free_array->full_matrix stays rather at the same speed and
        does not increase towards the end of the scan by more incoming data.
        Before the sorting algorithm took rather long and it could not be interrupted therefore
        the analysis thread could not be interrupted from the global interpreter lock (GIL) and the GUI was "frozen".
        (https://app.asana.com/0/10893101573162/684292750460327/f)

    - replaced remaining print(..) calls by appropiate logging.something(..) calls
    (https://app.asana.com/0/10893101573162/686607755696863/f)

Fixed:

    - a-axis in time resolved plot and voltage projction now matches range, before it was a little bit offset.
      Same for y-axis in time projection and the corresponding y-axis in time resolved plot
    - If Timeout occurs in pre-/post meas the dialog is not modal anymore, so scan can continue without user input.
      (https://app.asana.com/0/10893101573162/705131685031306/f)
    - fixed "breathing" of plotrange (https://app.asana.com/0/10893101573162/705027703451576/f)
    - fixed communication with Agilent3458A (https://app.asana.com/0/10893101573162/807169587029550/f)
    - fixed issue with during scan measurement preparation, which was before dependent on the pre scan measurement
      and would not start a triton / dmm measurement depending on the pre scan
      (https://app.asana.com/0/10893101573162/805241150974142/f)
      (https://app.asana.com/0/10893101573162/773897941897101/f)
    - fixed behavior of all Nodes, when the scan was stopped before data was coming in
      (https://app.asana.com/0/10893101573162/635091025014538/f)
    - Outbit Ui -> step/Scan number input was limited to 99, replaced with 99999999
    - working time for each track was not saved properly in some cases this was fixed by introducing the nodes
      NAddWorkingTimeOnStart(...) and by adding the working time also in the stop() call in the node
      NMPLImagePlotAndSaveSpecData(...)
      (https://app.asana.com/0/10893101573162/773897941897102/f)


***********************************************************************************************************************



