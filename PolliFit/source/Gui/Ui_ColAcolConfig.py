# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\Users\Patrick\Documents\Python Projects\Tilda\PolliFit\source\Gui\Ui_ColAcolConfig.ui'
#
# Created by: PyQt5 UI code generator 5.14.1
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_ColAcolConfig(object):
    def setupUi(self, ColAcolConfig):
        ColAcolConfig.setObjectName("ColAcolConfig")
        ColAcolConfig.resize(360, 240)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ColAcolConfig.sizePolicy().hasHeightForWidth())
        ColAcolConfig.setSizePolicy(sizePolicy)
        ColAcolConfig.setMinimumSize(QtCore.QSize(0, 200))
        ColAcolConfig.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Europe))
        self.verticalLayout = QtWidgets.QVBoxLayout(ColAcolConfig)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.hor_mode = QtWidgets.QHBoxLayout()
        self.hor_mode.setObjectName("hor_mode")
        self.l_rule = QtWidgets.QLabel(ColAcolConfig)
        self.l_rule.setObjectName("l_rule")
        self.hor_mode.addWidget(self.l_rule)
        self.c_rules = QtWidgets.QComboBox(ColAcolConfig)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.c_rules.sizePolicy().hasHeightForWidth())
        self.c_rules.setSizePolicy(sizePolicy)
        self.c_rules.setMinimumSize(QtCore.QSize(80, 0))
        self.c_rules.setObjectName("c_rules")
        self.c_rules.addItem("")
        self.c_rules.addItem("")
        self.c_rules.addItem("")
        self.hor_mode.addWidget(self.c_rules)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hor_mode.addItem(spacerItem)
        self.hor_mode.setStretch(2, 1)
        self.verticalLayout.addLayout(self.hor_mode)
        self.hor_parameter = QtWidgets.QHBoxLayout()
        self.hor_parameter.setObjectName("hor_parameter")
        self.l_parameter = QtWidgets.QLabel(ColAcolConfig)
        self.l_parameter.setObjectName("l_parameter")
        self.hor_parameter.addWidget(self.l_parameter)
        self.c_parameter = QtWidgets.QComboBox(ColAcolConfig)
        self.c_parameter.setObjectName("c_parameter")
        self.hor_parameter.addWidget(self.c_parameter)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hor_parameter.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.hor_parameter)
        self.hor_iterate = QtWidgets.QHBoxLayout()
        self.hor_iterate.setSpacing(3)
        self.hor_iterate.setObjectName("hor_iterate")
        self.l_iterate = QtWidgets.QLabel(ColAcolConfig)
        self.l_iterate.setObjectName("l_iterate")
        self.hor_iterate.addWidget(self.l_iterate)
        self.s_iterate = QtWidgets.QSpinBox(ColAcolConfig)
        self.s_iterate.setMinimumSize(QtCore.QSize(40, 0))
        self.s_iterate.setMaximum(9)
        self.s_iterate.setProperty("value", 1)
        self.s_iterate.setObjectName("s_iterate")
        self.hor_iterate.addWidget(self.s_iterate)
        self.l_delta = QtWidgets.QLabel(ColAcolConfig)
        self.l_delta.setObjectName("l_delta")
        self.hor_iterate.addWidget(self.l_delta)
        self.d_volt = QtWidgets.QDoubleSpinBox(ColAcolConfig)
        self.d_volt.setEnabled(False)
        self.d_volt.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.d_volt.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToNearestValue)
        self.d_volt.setDecimals(3)
        self.d_volt.setMinimum(0.001)
        self.d_volt.setMaximum(999.999)
        self.d_volt.setSingleStep(0.001)
        self.d_volt.setProperty("value", 1.0)
        self.d_volt.setObjectName("d_volt")
        self.hor_iterate.addWidget(self.d_volt)
        self.l_and = QtWidgets.QLabel(ColAcolConfig)
        self.l_and.setEnabled(False)
        self.l_and.setObjectName("l_and")
        self.hor_iterate.addWidget(self.l_and)
        self.d_mhz = QtWidgets.QDoubleSpinBox(ColAcolConfig)
        self.d_mhz.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.d_mhz.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToNearestValue)
        self.d_mhz.setDecimals(3)
        self.d_mhz.setMinimum(0.001)
        self.d_mhz.setMaximum(999.999)
        self.d_mhz.setProperty("value", 1.0)
        self.d_mhz.setObjectName("d_mhz")
        self.hor_iterate.addWidget(self.d_mhz)
        self.hor_iterate.setStretch(3, 1)
        self.hor_iterate.setStretch(5, 1)
        self.verticalLayout.addLayout(self.hor_iterate)
        self.hor_mc = QtWidgets.QHBoxLayout()
        self.hor_mc.setObjectName("hor_mc")
        self.check_mc = QtWidgets.QCheckBox(ColAcolConfig)
        self.check_mc.setObjectName("check_mc")
        self.hor_mc.addWidget(self.check_mc)
        self.s_mc = QtWidgets.QSpinBox(ColAcolConfig)
        self.s_mc.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToNearestValue)
        self.s_mc.setProperty("showGroupSeparator", True)
        self.s_mc.setMinimum(10000)
        self.s_mc.setMaximum(10000000)
        self.s_mc.setSingleStep(100000)
        self.s_mc.setProperty("value", 100000)
        self.s_mc.setObjectName("s_mc")
        self.hor_mc.addWidget(self.s_mc)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hor_mc.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.hor_mc)
        self.hor_voltage = QtWidgets.QHBoxLayout()
        self.hor_voltage.setObjectName("hor_voltage")
        self.check_voltage = QtWidgets.QCheckBox(ColAcolConfig)
        self.check_voltage.setChecked(True)
        self.check_voltage.setObjectName("check_voltage")
        self.hor_voltage.addWidget(self.check_voltage)
        self.verticalLayout.addLayout(self.hor_voltage)
        self.hor_plot = QtWidgets.QHBoxLayout()
        self.hor_plot.setObjectName("hor_plot")
        self.check_show = QtWidgets.QCheckBox(ColAcolConfig)
        self.check_show.setEnabled(False)
        self.check_show.setObjectName("check_show")
        self.hor_plot.addWidget(self.check_show)
        self.check_save = QtWidgets.QCheckBox(ColAcolConfig)
        self.check_save.setChecked(True)
        self.check_save.setObjectName("check_save")
        self.hor_plot.addWidget(self.check_save)
        self.line_file = QtWidgets.QLineEdit(ColAcolConfig)
        self.line_file.setObjectName("line_file")
        self.hor_plot.addWidget(self.line_file)
        self.verticalLayout.addLayout(self.hor_plot)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.hor_buttons = QtWidgets.QHBoxLayout()
        self.hor_buttons.setObjectName("hor_buttons")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hor_buttons.addItem(spacerItem4)
        self.b_ok = QtWidgets.QPushButton(ColAcolConfig)
        self.b_ok.setObjectName("b_ok")
        self.hor_buttons.addWidget(self.b_ok)
        self.b_cancel = QtWidgets.QPushButton(ColAcolConfig)
        self.b_cancel.setObjectName("b_cancel")
        self.hor_buttons.addWidget(self.b_cancel)
        self.verticalLayout.addLayout(self.hor_buttons)
        self.verticalLayout.setStretch(6, 1)

        self.retranslateUi(ColAcolConfig)
        QtCore.QMetaObject.connectSlotsByName(ColAcolConfig)

    def retranslateUi(self, ColAcolConfig):
        _translate = QtCore.QCoreApplication.translate
        ColAcolConfig.setWindowTitle(_translate("ColAcolConfig", "Col/Acol Configuration"))
        self.l_rule.setText(_translate("ColAcolConfig", "Combination rule:"))
        self.c_rules.setToolTip(_translate("ColAcolConfig", "<html><head/><body><p>Col (c) / Acol (a) combination rules:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">acca / caac</span> Accept sets of 4 consecutive files which are in the order <span style=\" font-style:italic;\">acca</span> or <span style=\" font-style:italic;\">caac</span>. Files are combined 1:1 in chronological order.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">free</span> Accept sets of files containing equal numbers of <span style=\" font-style:italic;\">c</span>  and <span style=\" font-style:italic;\">a</span> files. Files are combined 1:1 in chronological order.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">averaged</span> Accept sets of files containing at least one <span style=\" font-style:italic;\">c</span>  and <span style=\" font-style:italic;\">a</span> file. Results of <span style=\" font-style:italic;\">c</span> and <span style=\" font-style:italic;\">a</span> files are averaged first and then combined.</li></ul></body></html>"))
        self.c_rules.setItemText(0, _translate("ColAcolConfig", "acca / caac"))
        self.c_rules.setItemText(1, _translate("ColAcolConfig", "free"))
        self.c_rules.setItemText(2, _translate("ColAcolConfig", "averaged"))
        self.l_parameter.setText(_translate("ColAcolConfig", "<html><head/><body><p>&nu;<sub>0</sub> parameter</p></body></html>"))
        self.l_iterate.setText(_translate("ColAcolConfig", "Iterate max."))
        self.l_delta.setText(_translate("ColAcolConfig", "<html><head/><body><p>times until &Delta; &lt;</p></body></html>"))
        self.d_volt.setSuffix(_translate("ColAcolConfig", " V"))
        self.l_and.setText(_translate("ColAcolConfig", "&"))
        self.d_mhz.setSuffix(_translate("ColAcolConfig", " MHz"))
        self.check_mc.setText(_translate("ColAcolConfig", "MC uncertainties?"))
        self.s_mc.setSuffix(_translate("ColAcolConfig", " samples"))
        self.check_voltage.setText(_translate("ColAcolConfig", "write optimized acceleration voltage to database"))
        self.check_show.setText(_translate("ColAcolConfig", "show results?"))
        self.check_save.setText(_translate("ColAcolConfig", "save results?"))
        self.line_file.setText(_translate("ColAcolConfig", "ColAcol_{run}.txt"))
        self.b_ok.setText(_translate("ColAcolConfig", "OK"))
        self.b_cancel.setText(_translate("ColAcolConfig", "Cancel"))
